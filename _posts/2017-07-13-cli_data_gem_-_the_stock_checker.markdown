---
layout: post
title:  "CLI Data Gem - The Stock Checker"
date:   2017-07-13 18:31:19 +0000
---


For this portfolio project, I created a CLI Gem in Ruby that scrapes data from Yahoo! Finance 'Trending Tickers' and then displays data for the 30 scraped stocks. The CLI menu allows the user to display more in depth information about a stock of their choice or to sort the list of 30 stocks in a few different formats, such as highest to lowest daily change or alphabetical by stock symbol.

While it started off frustratingly, I eventually had a lot of fun building this project! A CLI interface is, of course, very simplistic and limited in its functionality, but after working through many smaller labs, README's, and instructional videos, I received a lot of satisfaction from using my improved coding skills to build a slightly bigger project. I also enjoyed that the project combined a bit of coding with a bit of finance, which are two areas of interest for me.

Like I said, the process was very frustrating in the beginning. I can only assume that I'm not the only programmer that finds getting set up to code often much more difficult than actually coding. Even though the project itself is very small, I quickly found that there is a big difference between forking and cloning a repository created by those who write the Learn.co curriculum and trying to set one up myself. I struggled for a few hours with properly implementing 'require' statements, so that my files could interact with each, before eventually figuring out how to use my 'stock_checker.rb' file as my environment. 

I hit my second major struggle in the project when I first tried to scrape from a website with relevant information about stocks. Through google searching, I found the NYSE official website, which contains detailed information about all stocks listed on that exchange. When I first found the website, I had a vision in which my gem would scrape information about every stock on the exchange and the user would be able to access up to date information for whichever they chose. The idea alone made me so excited! 

I added 'nokogiri' to my environment file, used it to grab the entire document from NYSE's stock listings url, and was well on my way! I used css selectors to access just the <tbody> tag that contained all of the information I needed, but then hit an absolute wall. Whenever I tried to select a node that contained the information about a single stock, instead of returning a <td> tag with the name of the stock, my line of code returned a <td> tag with the text, "Sorry, we couldn't find any instruments to match your criteria." I tried over and over again, but could only access this same sentence. I couldn't understand where Nokogiri came up with this sentence because I kept going back to the developer's view of the NYSE site within Google Chrome and I couldn't find the sentence anywhere. It appeared that it wasn't part of the website up until the moment that I tried to scrape stock data from it.

I spent 2 or 3 hours trying to work around it, asked a question on StackOverflow (for which I didn't have enough reputation to post more than 1 link. Ouch), and finally reached out to Corinna through Slack. She informed me that some websites block scraping so that other developers can't take their data and easily set up mirror sites. Dang it. She said that I could either use some fancy workaround, for which she gave me a link, or find another site to scrape from, which would be much easier. I examined the link and did my best to implement the workaround, but quickly discovered that it was way out of my league. After hours of trying to scrape from the NYSE's official website and create the Stock Checker CLI Gem of my dreams, I finally humbled myself, gave up the struggle, and settled for the less prestigious and informative Yahoo! Finance.

From there, it was mostly smooth sailing! I had a lot of fun gathering the data, implementing a few sorting methods that could display the data in cool formats, and adding coloring to the text to show if a stock was in the positive or negative for the day. It may be small, but I'm proud of my little CLI gem and I hope you like it too!
